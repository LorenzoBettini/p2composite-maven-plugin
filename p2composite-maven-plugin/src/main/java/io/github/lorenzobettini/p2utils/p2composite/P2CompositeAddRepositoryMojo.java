package io.github.lorenzobettini.p2utils.p2composite;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;

import org.apache.commons.io.FileUtils;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.eclipse.equinox.p2.core.ProvisionException;

/**
 * Goal which adds a single p2 repository as a child of an existing or brand new
 * p2 composite repository. With default values, it assumes to use the p2
 * repository generated by Tycho.
 * 
 * @author Lorenzo Bettini
 */
@Mojo(name = "add-repository", defaultPhase = LifecyclePhase.PACKAGE)
public class P2CompositeAddRepositoryMojo extends AbstractP2CompositeMojo {
	/**
	 * Directory of the p2 repository to copy.
	 */
	@Parameter(defaultValue = "${project.build.directory}/repository", property = "sourceDir", required = true)
	private File sourceDirectory;

	/**
	 * Name of the repository as a child of the p2 composite repository.
	 */
	@Parameter(required = true)
	private String childName;

	public void execute() throws MojoExecutionException {
		try {
			File destination = new File(outputDirectory, childName);
			getLog().info("Copying contents of " + sourceDirectory);
			getLog().info("Into " + destination);
			FileUtils.copyDirectory(sourceDirectory, destination);
			compositeRepositoryApplication.addDestination(outputDirectory, name, atomic, compressed);
			compositeRepositoryApplication.addChild(childName);
			compositeRepositoryApplication.run();
		} catch (ProvisionException | URISyntaxException | IOException e) {
			throw new MojoExecutionException("Error creating composite repository", e);
		}
	}

}
